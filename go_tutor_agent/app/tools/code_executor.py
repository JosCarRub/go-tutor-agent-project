# go_tutor_agent/app/tools/code_executor.py
import os
import requests
from smolagents import tool

GO_EXECUTOR_URL = os.getenv("GO_EXECUTOR_URL")

@tool
def execute_go_code(code: str) -> str:
    """
    Env√≠a un bloque de c√≥digo Go a un microservicio de ejecuci√≥n seguro y devuelve la salida.

    Args:
        code (str): El c√≥digo Go completo a ejecutar.
    """
    
    if not GO_EXECUTOR_URL:
        return "Error de configuraci√≥n: La variable de entorno GO_EXECUTOR_URL no est√° definida."

    print(f"üöÄ [Tool:Executor] Enviando c√≥digo al servicio remoto en {GO_EXECUTOR_URL}...")
    try:
        response = requests.post(
            f"{GO_EXECUTOR_URL}/execute",
            json={"code": code},
            timeout=20  
        )
        
        response.raise_for_status()
        
        data = response.json()
        
        if data.get("error"):
            error_output = data["error"]
            print(f"‚ùå [Tool:Executor] El servicio remoto devolvi√≥ un error:\n{error_output}")
            return f"El c√≥digo fall√≥ al ejecutarse. Error:\n---\n{error_output}"
        else:
            output = data.get("output", "")
            print(f"‚úÖ [Tool:Executor] Ejecuci√≥n remota exitosa. Salida:\n{output}")
            return f"Ejecuci√≥n completada con √©xito. Salida:\n---\n{output}"

    except requests.exceptions.Timeout:
        return "Error: La petici√≥n al servicio de ejecuci√≥n de c√≥digo ha expirado (timeout)."
    except requests.exceptions.RequestException as e:
        return f"Error de red al comunicarse con el servicio de ejecuci√≥n: {e}"
    except Exception as e:
        return f"Error inesperado al procesar la ejecuci√≥n del c√≥digo: {e}"