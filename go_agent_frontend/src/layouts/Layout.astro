---
import { ClientRouter } from 'astro:transitions';
import Navbar from '../components/navigation/Navbar.astro';
import Footer from '../components/navigation/Footer.astro';
import PlaygroundModal from '../components/playground/PlaygroundModal.astro';
import '../styles/global.css';

export interface Props {
  title: string;
}

const { title } = Astro.props;
---
<!DOCTYPE html>
<html lang="es" transition:animate="slide">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Go Tutor Agent - JosCarRub" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" href="/go.svg" type="image/svg+xml">
    <title>{title}</title>
    <ClientRouter />
  </head>
  <body class="bg-[var(--bg-primary)] text-[var(--text-primary)] transition-colors duration-300">
    
    <Navbar />

    <main class="pt-20 sm:pt-24 flex-1 w-full">
      <slot />
    </main>

    <Footer />

    <PlaygroundModal />

    <style is:global>
      :root {
        --go-color: #69d6e4;
        --go-color-dark: #04052a;
        --go-color-accent: #f4ed4a;
        
        
        --bg-primary: #f8fcff;
        --bg-secondary: #ffffff;
        --text-primary: #1a1a1a;
        --text-secondary: #6b7280;
        --border: #e5e7eb;
      }
      
      html {
        font-family: system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
        min-height: 100vh;
        scroll-behavior: smooth;
      }
      body {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
      }
      * {
        scrollbar-width: thin;
        scrollbar-color: var(--go-color) transparent;
      }
      *::-webkit-scrollbar { width: 6px; }
      *::-webkit-scrollbar-track { background: transparent; }
      *::-webkit-scrollbar-thumb {
        background-color: var(--go-color);
        border-radius: 3px;
      }
    </style>

    <script>

      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();
      if (theme) {
        document.documentElement.className = theme;
      }
    
      const initialCode = `package main
    
   import "fmt"

  // Escribe tu código y copia tu código con el botón inferior.

  func main() {
  fmt.Println("¡Hola, Gopher!")
  }`;
    
  function openModal() {
    const modal = document.getElementById('playground-modal') as HTMLElement | null;
    const editorTextarea = document.getElementById('code-editor-textarea') as HTMLTextAreaElement | null;
    
    if (!modal || !editorTextarea) return;
    if (!editorTextarea.value) {
      editorTextarea.value = initialCode;
    }
    modal.dataset.state = 'open';
  }

  function closeModal() {
    const modal = document.getElementById('playground-modal');
    if (modal) modal.dataset.state = 'closed';
  }

  document.addEventListener('click', (e: MouseEvent) => {
    const target = e.target as Element;

    if (target.closest('.js-open-playground')) {
      openModal();
      return;
    }

    const modal = document.getElementById('playground-modal');
    const closeButton = target.closest('button[data-action="close"]');

    if ((closeButton && modal?.contains(closeButton)) || e.target === modal) {
      closeModal();
    }
  });

  document.addEventListener('keydown', (e: KeyboardEvent) => {
    const modal = document.getElementById('playground-modal');
    if (e.key === 'Escape' && modal?.dataset.state === 'open') {
      closeModal();
    }
  });
</script>
  </body>
</html>